package real;

import java.util.Scanner;

/**
 * 题目描述
 小易有一个长度为n的整数序列,a_1,...,a_n。然后考虑在一个空序列b上进行n次以下操作:
 1、将a_i放入b序列的末尾
 2、逆置b序列
 小易需要你计算输出操作n次之后的b序列。
 输入描述:
 输入包括两行,第一行包括一个整数n(2 ≤ n ≤ 2*10^5),即序列的长度。
 第二行包括n个整数a_i(1 ≤ a_i ≤ 10^9),即序列a中的每个整数,以空格分割。
 输出描述:
 在一行中输出操作n次之后的b序列,以空格分割,行末无空格。
 示例1
 输入
 复制
 4
 1 2 3 4
 输出
 复制
 4 2 1 3
 */

public class Wangyi04 {
    public static void main(String args[]){
        Scanner in = new Scanner(System.in);
//        int n = Integer.parseInt(in.nextLine());
//        String line = in.nextLine();
        int n = 727;
        String line
//时间复杂度过大
        String[] inputs = line.split(" ");
//
//        Point p = new Point(Integer.parseInt(inputs[0]));
//        for (int i=1; i<n; i++){
//            add(p, new Point(Integer.parseInt(inputs[i])));
//            p = reverse(p);
//        }
//
//        StringBuffer sb = new StringBuffer();
//        while (p != null){
//            sb.append(p.value);
//            sb.append(" ");
//            p = p.next;
//        }
//
//        sb.deleteCharAt(sb.length()-1);
//        System.out.println(sb.toString());

        //找数学规律 n n-2 n-4 ... 1 3 n-1 （注意n是奇数还是偶数）
        StringBuffer sb = new StringBuffer();
        if (n%2 == 0){
            for (int i=n-1; i>=0; i-=2){
                sb.append(inputs[i]);
                sb.append(" ");
            }
            for (int i=0; i<n; i+=2){
                sb.append(inputs[i]);
                sb.append(" ");
            }
        } else {
            for (int i=n-1; i>=0; i-=2){
                sb.append(inputs[i]);
                sb.append(" ");
            }
            for (int i=1; i<n; i+=2){
                sb.append(inputs[i]);
                sb.append(" ");
            }
        }

        System.out.println(sb.deleteCharAt(sb.length()-1).toString());
    }

    public static Point reverse(Point p){
        if (p == null){
            return null;
        }
        Point node = p;
        Point newHead = null;
        Point pre = null;
        while (node != null){
            Point next = node.next;
            if (next == null){
                newHead = node;
            }

            node.next = pre;
            pre = node;
            node = next;
        }
        return newHead;
    }

    public static Point add(Point head, Point p){
        Point node = head;
        while (node.next != null){
            node = node.next;
        }
        node.next = p;
        return head;
    }
}

class Point{
    int value;
    Point next = null;

    public Point(int value){
        this.value = value;
    }
}
